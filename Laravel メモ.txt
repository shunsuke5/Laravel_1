Laravel メモ

・Laravelをインストールする前に、「Composer」をインストールする必要がある。Composerとは、php向けの依存関係管理システム。
　ライブラリ依存関係を簡単な記述で管理できるようにしたものが依存関係管理システムである。

・Composerをインストールする際に参考にしたサイトは以下。
　https://qiita.com/tsuna_kan/items/a51cfaa668ced7bacb0e

・Laravelをインストールする「composer create-project laravel/laravel Laravel_1」コマンドは、
　Laravelフォルダを作成したい場所で行う。今回はC:\Users\Owner配下でやってしまったので、ここに作成された。
　Apacheのhtdocs配下に再度インストールする。

・.envファイルとdatabase.phpファイルを編集し、無事にブラウザからLaravelを表示することができた。

・公式ドキュメントのインストールガイド内にある「Next Steps」に「Laravel Bootcamp」のリンクがあったので、
　それを読みながら進めている。最も率直らしいのでBladeの手順を進めた。
　インストールガイドは →　https://laravel.com/docs/11.x#databases-and-migrations
　Bootcampは →　https://bootcamp.laravel.com/

・php artisan serve コマンドを実行してサーバーを起動し、localhost:8000 と打ち込んで表示されるページ右上の
　「Register」からユーザーを登録した。以降ログインにはこの情報を使うはず。
　ちなみに、こういった学習用のユーザーパスワードは「ユーザー名と同じもの」とする。rootならroot、adminならadmin、
　shunsukeならshunsuke、のようにする。

・Laravelの時間が標準時子午線の時間になってしまっているので、直す。

・app\Models\配下のUser.php と Laravel_1.phpの HasMany と BelongsTo は対称的な設定。
　そのため、ユーザ側に設定したものと対するものをサーバ側のモデルに設定する必要がある？

・php.ini の date.timezone = に Asia/Tokyo を設定した。

【Request Lifecycle】

Lifecycle Overview
First Steps

・Laravelにおいて、全てのリクエストの入り口はpublic/index.phpファイル。

HTTP / Console Kernels

・入ってくるリクエストはアプリインスタンスのHTTPカーネル、またはコンソールカーネルのどちらかに送られる。
　アプリケーションインスタンスのhandleRequest か handleCommand メソッドを使用して送られてくる。
　それらのメソッドはリクエストがアプリに入る形によって決まる。

　この2つのカーネルは、全てのリクエストの流れを通す中心位置としても機能する。

・HTTPカーネルはリクエストが実行される前に実行される bootstrappers の配列を定義する。
　これらのbootstrappersは、エラーハンドリングやログ、アプリの環境を検出したり、
　リクエストが実際に処理される前に行われなければならない他のタスクを行う。

　一般的に、これらのクラスは我々が気にする必要が無いlaravelの内部設定を処理する。

・HTTPカーネルはまた、アプリケーションのミドルウェアスタックを通してリクエストを通す責任がある。

　これらのミドルウェアはHTTPセッションの読み書き、アプリがメンテナンスモードであるかの決定、
　CSRF tokenの検証などを処理する。

　HTTPカーネルのhandleメソッドのシグネチャはとてもシンプル。
　Request を受け取り、Response を返す。カーネルがあなたのアプリ全体を表す巨大なブラックボックスであると考える、
　これにHTTPリクエストを与えれば、HTTPレスポンスを返す。

Service Providers

・カーネルのブートストラップにおいて、最も重要なアクションの1つは、アプリケーションのservice providersを読み込むこと。
　サービスプロバイダはブートストラップにおいて、データベース、キュー、検証やコンポーネントのルーティングなど、
　フレームワークの全ての様々な構成要素に責任を持つ。

・Laravelはこのプロバイダーのリストを反復処理してから、それらを1つずつインスタンス化する。
　プロバイダーをインスタンス化した後、registerメソッドが全てのプロバイダで呼ばれる。
　そこから、いったんプロバイダーの全てが登録されたら、bootメソッドがそれぞれのプロバイダで呼ばれる。
　これはサービスプロバイダが登録されている全てのコンテナバインディングに頼り、
　それからbootメソッドが実行されるまでに使用可能になるかもしれない。

　基本的に、Laravelが提供する全ての主要な機能はサービスプロバイダによってブートストラップ、設定される。
　フレームワークが提供するとても多くの機能をブートストラップして設定するため、
　サービスプロバイダはLaravelのブートストラッププロセスにおいて最も重要な側面である。

　フレームワークは内部的に数十のサービスプロバイダを使用しているが、独自のサービスプロバイダを作成する方法もある。

Routing

・アプリがブートストラップされ、全てのサービスプロバイダが登録されたら、Requestはルーターに渡されディスパッチされる。
　ルーターはリクエストをルートかコントローラーに送るだけでなく、特定のルートに対して設定されたミドルウェアも実行する。

　ミドルウェアはアプリに入ってくるHTTPリクエストをフィルタリング、検査するのに便利な機構を提供する。
　例えば、Laravelはアプリのユーザーが認証されているかどうかを検証するミドルウェアを含んでいる。
　もしユーザが認証されていない場合、ミドルウェアはユーザをログインページへリダイレクトする。
　もしユーザが認証されていれば、ミドルウェアはリクエストをアプリ内で更に処理することを許可する。
　いくつかのミドルウェアはアプリ内の全てのルートに割り当てられる。例えば、PreventRequestsDuringMaintenance など。
　一方で、特定のルートやルートグループに割り当てられるミドルウェアもある。
　ミドルウェアについてより学習したい場合は　https://laravel.com/docs/11.x/middleware

　もしリクエストがミドルウェアに割り当てられている全てのルートにマッチして通り抜けたなら、
　ルートまたはコントローラーのメソッドが実行され、
　そのメソッドからのレスポンスがルートのミドルウェアチェーンを通じて返される。

Finishing Up

・ルートまたはコントローラーのメソッドがレスポンスを返すと、そのレスポンスはルートのミドルウェアを通じて外部へと戻る。
　これにより、アプリは送信されるレスポンスを変更したり調査したりする機会が得られる。

　最終的に、レスポンスがミドルウェアを通じて戻ると、HTTPカーネルのhandleメソッドはレスポンスオブジェクトを
　アプリインスタンスのhandleRequestメソッドに返し、このメソッドは返されたレスポンスに対してsendメソッドを呼び出す。
　sendメソッドはレスポンス内容をユーザのwebブラウザに送る。

Focus on Service Providers

・サービスプロバイダは本当にLaravelアプリを起動する鍵である。
　アプリのインスタンスが作られ、サービスプロバイダが登録され、リクエストが起動されたアプリに渡される。

　Laravelアプリがどのようにビルドされ、サービスプロバイダを介して起動されるかをしっかりと理解することはとても重要。
　アプリのユーザが定義したサービスプロバイダは app/Providersディレクトリに保存されている。

　デフォルトでは、AppServiceProvider はかなり空である。このプロバイダはアプリの固有のブートストラップや、
　サービスコンテナのバインディングを加えるのに非常に良い場所である。
　大規模なアプリでは、アプリが使用する特定のサービスに対してより細かなブートストラップを行うために、
　いくつかのサービスプロバイダを作成することが望ましい場合がある。

【Configure】

Introduction

・全てのLaravelフレームワーク設定ファイルは configディレクトリに保存されている。
　それぞれの設定にはドキュメントが付属しているので、ファイルを見て利用可能なオプションに慣れるようにする。

　これらの設定ファイルを使用すると、データベースの接続情報、メールサーバ情報などの設定を行うことができる。
　また、それらだけでなくタイムゾーンや暗号化キーなど他の様々なコア設定値も設定できる。

#The about Command

・Laravelは php artisan about コマンドでアプリ設定、ドライバ、環境などの概要を表示できる。
　もしアプリの特定のセクションだけを表示したい場合、php artisan about --only=wnvironment のように--onlyオプションを使用する。
　もしくは、特定の設定ファイルの値を詳細に知りたい場合は、php artisan config:show database のようにする。

Environment Configuration

・アプリが実行される環境に基づいて異なる設定値を持つことは、しばしば役に立つ。
　例えば、ローカルで使用するキャッシュドライバは本番サーバとは別のものを使用したい場合があるかもしれない。

　Laravelは DotEnv phpライブラリを利用する。新しくLaravelをインストールすると、
　アプリのルートディレクトリに.env.exampleファイルが含まれており、このファイルには多くの一般的な環境変数を定義されている。
　Laravelのインストール中、このファイルは自動的に.envファイルにコピーされる。

　Laravelのデフォルト.envファイルはいくつかの一般的な設定値を含む。
　この設定値は、アプリがローカルか本番サーバのどちらで動作しているかによって異なる。
　これらの値は、その後、Laravelのenv 関数を使用して、configディレクトリ内の設定ファイルに読み込まれる。

　もしチームで開発をする場合、.env.exampleファイルをアプリと一緒に含めて、定期的に更新するのが望ましいかもしれない。
　例の設定ファイル内にプレースホルダ値を設定することで、同チームの他の開発者はアプリ実行に必要な環境変数を明確に把握することができる。
　あなたの.envファイル内の任意の変数は、サーバーレベルやシステムレベルの環境変数などの外部環境変数によって上書きされる可能性がある。

#Environment File Security

・

Configure の a の b から

=================================================================================================================================

エラーやミス、わからないことなど

・「composer create-project laravel/laravel Laravel_1」コマンドをdosで実行し、Laravelをインストールしようとしたところ、
　「Failed to download laravel/laravel from dist: The zip extension and unzip/7z commands are both missing, skipping.
　The php.ini used by your command-line PHP is: C:\php-sdk\php.ini Now trying to download from source」とエラーが出る。
　調べたところ、これはphp.iniのzip拡張を有効にすれば良いとのこと。
　参考サイト　https://qiita.com/nejimawaso/items/55512b40b724e35880c3

　しかしdosのカーソルがまだ実行中になっていたのでそのまま待っているとインストールが進み、owner配下にLaravel_1フォルダが作成された。
　しかしインストール後、「Your requirements could not be resolved to an installable set of packages」のエラーが出た。
　また、Laravel_1フォルダ配下に「vendor」フォルダがなく、恐らくエラーのせいで欠けたのだと判断した。

　インストール後に出たエラーの後にProblem1 のように表示されていたエラーメッセージとしては以下のようなものがあった。
　「require ext-fileinfo * -> it is missing from your system. Install or enable PHP's fileinfo extension.」
　「require php ^7.2 -> your php version (8.3.4) does not satisfy that requirement.」
　そのため、php.iniのfileinfoのコメントアウトを外し、Laravel_1配下の「composer.json」ファイルのphpバージョン指定に
　8.0と8.3.4を追加した。
　参考サイト　https://qiita.com/yyy752/items/20e86a6141d7062e0140

　再インストールしようとすると「Project directory "C:\Users\Owner\Laravel_1" is not empty」のエラー。
　一旦Laravel_1を削除すると次は「The openssl extension is required for SSL/TLS protection but is not available. 
　If you can not enable the openssl extension, you can disable this error, at your own risk, by setting the 'disable-tls' 
　option to true.」のエラーが出た。opensslの拡張を有効にし、再度インストールし直すとインストールが進行し、
　エラーが出ることなくインストールが完了した。Vendorフォルダも作成されていた。

・Laravelを開始し、localhost:4000で接続すると「SQLSTATE[HY000] [1049] Unknown database 'laravel'」のエラーが出た。
　.envファイルのDB_DATABASE=laravel を test に変更した。

　上記を行ってから接続すると、次は「SQLSTATE[42S02]: Base table or view not found: 1146 Table 'test.sessions' doesn't exist」
　のエラーが出た。調べると、LaravelがDBを扱う際に必要になるテーブルを保持していない、という内容のエラーとのこと。
　そのため、php artisan migrate コマンドを実行して、設定ファイルで指定しているデータベースにLaravelが扱うテーブルを
　作成しなければならない。
　参考サイト　https://kamita.net/program/?p=560

・webアプリでメッセージを送った時間がUTCになっていたので、
　「C:\Apache24\htdocs\Laravel_1\vendor\laravel\framework\src\Illuminate\Foundation\Bootstrap\LoadConfiguration.php」ファイルの
　date_default_timezone_set の UTC を UTC+9 とした。その状態でphp artisan コマンドを実行したり、Webページを表示すると
　「PHP Notice:  date_default_timezone_set(): Timezone ID 'UTC+9' is invalid in C:\Apache24\htdocs\Laravel_1\vendor\
　laravel\framework\src\Illuminate\Foundation\Bootstrap\LoadConfiguration.php on line 46」のようなエラーが出る。
　　→ 原因は.envファイルの「APP_TIMEZONE」の設定値が UTC+9 となっていることだった。ここをJSTに変更すると、
　　　次は同じエラー文でJST is invalid in ... のように表示された。ここを UTC に変更すると、エラーが無くなった。
　　　しかしなぜ.envファイルのことなのにLoadConfiguration.phpのエラーのような表示がされるのか？
　　　そして、.envをJSTにする方法は無いのだろうか？

・